
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__rrinit_adaptor_h__ADAPTOR_MARSHAL_H
#define __dbusxx__rrinit_adaptor_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace rongorongo {

class apps_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    apps_adaptor()
    : ::DBus::InterfaceAdaptor("org.rongorongo.apps")
    {
        register_method(apps_adaptor, getList, _getList_stub);
        register_method(apps_adaptor, open, _open_stub);
        register_method(apps_adaptor, close, _close_stub);
    }

    ::DBus::IntrospectedInterface *const introspect() const 
    {
        static ::DBus::IntrospectedArgument getList_args[] = 
        {
            { "apps", "a{s(sss)}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument open_args[] = 
        {
            { "id", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument close_args[] = 
        {
            { "id", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod apps_adaptor_methods[] = 
        {
            { "getList", getList_args },
            { "open", open_args },
            { "close", close_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod apps_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty apps_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface apps_adaptor_interface = 
        {
            "org.rongorongo.apps",
            apps_adaptor_methods,
            apps_adaptor_signals,
            apps_adaptor_properties
        };
        return &apps_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual std::map< std::string, ::DBus::Struct< std::string, std::string, std::string > > getList() = 0;
    virtual void open(const std::string& id) = 0;
    virtual void close(const std::string& id) = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _getList_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::map< std::string, ::DBus::Struct< std::string, std::string, std::string > > argout1 = getList();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _open_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        open(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _close_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        close(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
};

} } 
#endif //__dbusxx__rrinit_adaptor_h__ADAPTOR_MARSHAL_H
